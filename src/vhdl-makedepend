#!/bin/sh

#-------------------------------------------------------------------------------
# Copyright (C) 2018 Dominik Salvet
# SPDX-License-Identifier: MIT
# <https://github.com/dominiksalvet/vhdl-makedepend>
#-------------------------------------------------------------------------------


#-------------------------------------------------------------------------------
# SOFTWARE DEPENDECIES
#-------------------------------------------------------------------------------

# list of required software
SW_REQUIRED='echo sed'

# check if some software is missing
for i in $SW_REQUIRED; do
    # software is missing if at least one piece of software is missing
    if ! command -v "$i" > /dev/null; then
        echo "$0: Required software \"$i\" is missing, action canceled." >&2
        exit 1
    fi
done


#-------------------------------------------------------------------------------
# PROCESSING PARAMETERS
#-------------------------------------------------------------------------------

HELP_MESSAGE="Usage: $0 [OPTION]... FILE...

OPTION:
  --help            display this help and exit
  --object-dir=DIR  object files directory path
  --about           display information about this program and exit"

ABOUT_MESSAGE="$0 1.0.0
This program displays object dependencies of one or more VHDL files.

Copyright (C) 2018 Dominik Salvet
SPDX-License-Identifier: MIT
<https://github.com/dominiksalvet/vhdl-makedepend>"

HINT_MESSAGE="Try '$0 --help' for more information."

# function to add a file to the list of current ones
add_file() {
    # normalize a given path (removes only unnecessary slashes "/")
    norm_path=$(echo "$1" | sed -e 's|/\+|/|g')

    if [ -z "$file_list" ]; then
        file_list="$norm_path"
    else
        file_list="$file_list $norm_path"
    fi
}

# check if no argument provided
if [ $# -eq 0 ]; then
    echo "$0: No argument provided." >&2
    echo "$HINT_MESSAGE" >&2
    exit 1
fi

# next parameters are only file names
file_names_only=false

# processing each parameter
for i in "$@"; do
    if [ "$file_names_only" = true ]; then
        add_file "$i"
    else
        case "$i" in
            --help)
                echo "$HELP_MESSAGE"
                exit 0
                ;;
            --object-dir=?*)
                # get the DIR path from this parameter, normalize the path
                object_dir=$(echo "$i" | sed -e 's|^--object-dir=||;s|$|/|;s|/\+|/|g;')
                ;;
            --about)
                echo "$ABOUT_MESSAGE"
                exit 0
                ;;
            --)
                file_names_only=true
                ;;
            --*)
                echo "$0: unrecognized option '$i'" >&2
                echo "$HINT_MESSAGE" >&2
                exit 1
                ;;
            *)
                add_file "$i"
                ;;
        esac
    fi
done

# check if files in the list exist
for i in $file_list; do
    if [ ! -f "$i" ]; then
        echo "$0: Can not open the '$i' file." >&2
        exit 1
    fi
done


#-------------------------------------------------------------------------------
# DEFINITIONS
#-------------------------------------------------------------------------------

GET_TARGET='
s|^.*/||;
s/\..*/.o/;
s|^|'"$object_dir"'|
'

REMOVE_COMMENTS='s/--.*$//'

GET_USES='
/^\s*use\s.*\;/b
/^\s*use\s/,/\;/!d
'

ONE_USE_PER_LINE='
/use/!b
:next
/\;/bdone
N
bnext
:done
s/\n//g
'

ONE_LOCAL_USE_DEPENDENCY_PER_LINE='
s/use//
s/\s*//g
/^ieee\|^std/d
s/\;$//
s/\.all$//
s/^.*\.//
s/$/\.o/
s|^|'"$object_dir"'|
'

LOCAL_USE_DEPENDENCIES='
:next
$bdone
N
bnext
:done
s/\n/ /g
'


#-------------------------------------------------------------------------------
# EXECUTION
#-------------------------------------------------------------------------------

for i in $file_list; do

    target=$(
    echo "$i" |
    sed -e "$GET_TARGET"
    )

    sed_result=$(
    sed -e "$REMOVE_COMMENTS" \
        -e "$GET_USES" \
        -- "$i" |
    sed -e "$ONE_USE_PER_LINE" \
        -e "$ONE_LOCAL_USE_DEPENDENCY_PER_LINE" |
    sed -e "$LOCAL_USE_DEPENDENCIES"
    )

    echo "$target: $i $sed_result"

done
