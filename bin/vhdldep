#!/bin/sh

#-------------------------------------------------------------------------------
# Copyright 2018-2019 Dominik Salvet
# SPDX-License-Identifier: MIT
# https://github.com/dominiksalvet/vhdldep
#-------------------------------------------------------------------------------
# DESCRIPTION:
#   This file represents vhdldep - simple VHDL dependency generator.
# PARAMETERS:
#   All given arguments are processed as vhdldep's help describes.
#-------------------------------------------------------------------------------


#-------------------------------------------------------------------------------
# SOFTWARE DEPENDENCIES
#-------------------------------------------------------------------------------

# list of required software
SW_DEPS='command echo sed [ getopts tr grep'

# check if some software is missing
for sw in $SW_DEPS; do
    # software is missing if at least one piece of software is missing
    if ! command -v -- "$sw" > /dev/null; then
        echo "$0: missing $sw software" >&2
        exit 1
    fi
done

#-------------------------------------------------------------------------------
# DEFINITIONS
#-------------------------------------------------------------------------------

# the current version of vhdldep
VERSION=1.1.0

HELP_MESSAGE="USAGE:
  $0 [OPTION...] FILE...
  $0 COMMAND

OPTION:
  -p PATH  prefix for generated paths

COMMAND:
  help   show this help
  about  show information"

ABOUT_MESSAGE="vhdldep $VERSION
Simple VHDL dependency generator.

Copy"'right 2018-2019 Dominik Salvet
SPDX License Identifier: MIT
https://github.com/dominiksalvet/vhdldep'

HINT_MESSAGE="Try '$0 help' for getting help."

#-------------------------------------------------------------------------------
# ARGUMENT PARSING
#-------------------------------------------------------------------------------

# process commands
case "$1" in
    help) echo "$HELP_MESSAGE"; exit ;;
    about) echo "$ABOUT_MESSAGE"; exit ;;
esac

# process options
path_prefix=
while getopts :p: opt; do
    case "$opt" in
        p)  path_prefix="$OPTARG" ;;
        :)  echo "$0: no arg for -$OPTARG option
$HINT_MESSAGE" >&2
            exit 1
            ;;
        \?) echo "$0: illegal option -$OPTARG
$HINT_MESSAGE" >&2
            exit 1
            ;;
    esac
done
shift $((OPTIND - 1)) # shift to remaining arguments

# check if there is a file argument
if [ "$#" -eq 0 ]; then
    echo "$0: no file argument provided
$HINT_MESSAGE" >&2
    exit 1
fi

#-------------------------------------------------------------------------------
# SED SCRIPTS (BRE)
#-------------------------------------------------------------------------------

# escape all existing spaces
ESCAPE_SPACES='s/ /\\ /g'

# remove VHDL comment
REMOVE_COMMENTS='s/--.*$//'

# remove first use word from each line
REMOVE_USE_WORDS='s/[Uu][Ss][Ee]//'

# remove all whitespace characters
REMOVE_WHITESPACES='s/[[:space:]]*//g'

# remove all use statements that use standard libraries (ieee, std)
REMOVE_STANDARD_LIB_LINES='
/^[Ii][Ee][Ee][Ee]\./d
/^[Ss][Tt][Dd]\./d
'

# remove '.all' suffix from use statements
REMOVE_QUANTIFIERS='s/\.[Aa][Ll][Ll]$//'

# remove library names from current use statement
REMOVE_LIB_NAMES='s/^.*\.//'

# append object suffixes to lines
APPEND_OBJECT_SUFFIXES='s/$/\.o/'

#-------------------------------------------------------------------------------
# GREP PATTERNS (ERE)
#-------------------------------------------------------------------------------

# print all use statements, one per line
ONE_USE_PER_LINE='^[[:space:]]*use[[:space:]]+[[:alnum:]]'

#-------------------------------------------------------------------------------
# RULES GENERATOR
#-------------------------------------------------------------------------------

# escape spaces in path prefix
path_prefix="$(echo "$path_prefix" | sed "$ESCAPE_SPACES")" &&

# create a make rule for each given file
for file_path in "$@"; do
    # create the target of the current rule
    target="${file_path##*/}" && # remove path prefix
    target="${target%.*}" && # remove file suffix
    target="${path_prefix}$target".o && # prepend delivered path prefix

    # create the VHDL file prerequisite
    vhdl_prereq="$(echo "$file_path" | sed "$ESCAPE_SPACES")" &&

    # create other prerequisites
    prereqs="$(sed "$REMOVE_COMMENTS" -- "$file_path")" &&
    prereqs="$(echo "$prereqs" | grep -iF use)" && # accept only lines with use
    prereqs="$(echo "$prereqs" | tr ';' '\n')" && # replace semicolons
    prereqs="$(echo "$prereqs" | grep -iE "$ONE_USE_PER_LINE")" &&
    prereqs="$(echo "$prereqs" | sed "$REMOVE_USE_WORDS")" &&
    prereqs="$(echo "$prereqs" | sed "$REMOVE_WHITESPACES")" &&
    prereqs="$(echo "$prereqs" | sed "$REMOVE_STANDARD_LIB_LINES")" &&
    prereqs="$(echo "$prereqs" | sed "$REMOVE_QUANTIFIERS")" &&
    prereqs="$(echo "$prereqs" | sed "$REMOVE_LIB_NAMES")" &&
    prereqs="$(echo "$prereqs" | sed "$APPEND_OBJECT_SUFFIXES")" &&

    # add a prefix to prerequisites and transform them into a single line
    prereqs_line= &&
    for prereq in $prereqs; do
        prereqs_line="${prereqs_line} ${path_prefix}$prereq"
    done &&

    echo "$target: ${vhdl_prereq}$prereqs_line"
done
